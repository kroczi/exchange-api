# Scala SLICK application settings
exchange-db-connection {
  # HikariCP  https://github.com/brettwooldridge/HikariCP
  connectionTimeout = ${?HIKARICP_CONNECTIONTIMEOUT}
  keepaliveTime     = ${?HIKARICP_KEEPALIVETIME}
  maxLifetime       = ${?HIKARICP_MAXLIFETIME}
}

ibm {
  common-services {
    external-management-ingress     = ${?ICP_EXTERNAL_MGMT_INGRESS}
    management-ingress-service-port = ${?ICP_MANAGEMENT_INGRESS_SERVICE_PORT}
    identity-provider-service-port  = ${?PLATFORM_IDENTITY_PROVIDER_SERVICE_PORT}
  }
}

# Apache Pekko setings
# https://pekko.apache.org/docs/pekko/current/general/configuration-reference.html#pekko-actor
# https://pekko.apache.org/docs/pekko-http/current/configuration.html
pekko {
  coordinated-shutdown.phases.service-unbind.timeout = 60s              # Number of seconds to let in-flight requests complete before exiting the server
  http.parsing.max-header-name-length = 128
  http.server.backlog = 103
  http.server.default-http-port = 8080                                  # Services HTTP traffic
  http.server.default-https-port = 8083                                 # Services HTTPS traffic
  http.server.server-header = ""
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  request-timeout = 45s
}

# Apache Pekko - CORS settings  https://pekko.apache.org/docs/pekko-http/current/configuration.html
pekko-http-cors {
  allow-credentials = true
  allow-generic-http-requests = true                                       # Do not apply `Origin` header check to non-preflight (`OPTIONS`) requests
  allowed-headers = ["*"]
  allowed-methods = ["DELETE", "GET", "OPTIONS","PATCH", "POST", "PUT"]
  allowed-origins = ["*"]
  exposed-headers = ["*"]
  max-age = 0s
}

# Logback logger Settings
logback.core.model.processor.AppenderRefModelHandler        = ${?EXCHANGE_LOG_LOGBACK_APPENDERREFMODELHANDLER}
logback.classic.model.processor.LoggerModelHandler          = ${?EXCHANGE_LOG_LOGBACK_LOGGERMODELHANDLER}
logback.hikari.HikariConfig                                 = ${?EXCHANGE_LOG_HIKARI_CONFIG}
logback.hikari.HikariDataSource                             = ${?EXCHANGE_LOG_HIKARI_DATASOURCE}
logback.hikari.pool.HikariPool                              = ${?EXCHANGE_LOG_HIKARI_POOL}
logback.hikari.pool.PoolBase                                = ${?EXCHANGE_LOG_HIKARI_POOL_BASE}
logback.scalacache.caffeine.CaffeineCache                   = ${?EXCHANGE_LOG_SCALACACHE_CAFFEINE}
logback.slick.basic.BasicBackend.action                     = ${?EXCHANGE_LOG_SLICK_ACTION}
logback.slick.basic.BasicBackend.stream                     = ${?EXCHANGE_LOG_SLICK_STREAM}
logback.slick.compiler-log                                  = ${?EXCHANGE_LOG_SLICK_COMPILER}
logback.slick.compiler.AssignUniqueSymbols                  = ${?EXCHANGE_LOG_SLICK_COMPILER_ASSIGNUNIQUESYMBOLS}
logback.slick.compiler.CodeGen                              = ${?EXCHANGE_LOG_SLICK_COMPILER_CODEGEN}
logback.slick.compiler.CreateAggregates                     = ${?EXCHANGE_LOG_SLICK_COMPILER_CREATEAGGREGATES}
logback.slick.compiler.CreateResultSetMapping               = ${?EXCHANGE_LOG_SLICK_COMPILER_CREATERESULTSETMAPPING}
logback.slick.compiler.EmulateOuterJoins                    = ${?EXCHANGE_LOG_SLICK_COMPILER_EMULATEOUTERJOINS}
logback.slick.compiler.ExpandConditionals                   = ${?EXCHANGE_LOG_SLICK_COMPILER_EXPANDCONDITIONALS}
logback.slick.compiler.ExpandRecords                        = ${?EXCHANGE_LOG_SLICK_COMPILER_EXPANDRECORDS}
logback.slick.compiler.ExpandSums                           = ${?EXCHANGE_LOG_SLICK_COMPILER_EXPANDSUMS}
logback.slick.compiler.ExpandTables                         = ${?EXCHANGE_LOG_SLICK_COMPILER_EXPANDTABLES}
logback.slick.compiler.FixRowNumberOrdering                 = ${?EXCHANGE_LOG_SLICK_COMPILER_FIXROWNUMBERORDERING}
logback.slick.compiler.FlattenProjections                   = ${?EXCHANGE_LOG_SLICK_COMPILER_FLATTENPROJECTIONS}
logback.slick.compiler.ForceOuterBinds                      = ${?EXCHANGE_LOG_SLICK_COMPILER_FORCEOUTERBINDS}
logback.slick.compiler.HoistClientOps                       = ${?EXCHANGE_LOG_SLICK_COMPILER_HOISTCLIENTOPS}
logback.slick.compiler.Inline                               = ${?EXCHANGE_LOG_SLICK_COMPILER_INLINE}
logback.slick.compiler.InferTypes                           = ${?EXCHANGE_LOG_SLICK_COMPILER_INFERTYPES}
logback.slick.compiler.InsertCompiler                       = ${?EXCHANGE_LOG_SLICK_COMPILER_INSERTCOMPILER}
logback.slick.compiler.MergeToComprehensions                = ${?EXCHANGE_LOG_SLICK_COMPILER_MERGETOCOMPREHENSIONS}
logback.slick.compiler.OptimizeScalar                       = ${?EXCHANGE_LOG_SLICK_COMPILER_OPTIMIZESCALAR}
logback.slick.compiler.PruneProjections                     = ${?EXCHANGE_LOG_SLICK_COMPILER_PRUNEPROJECTIONS}
logback.slick.compiler.QueryCompiler                        = ${?EXCHANGE_LOG_SLICK_COMPILER_QUERY}
logback.slick.compiler.QueryCompilerBenchmark               = ${?EXCHANGE_LOG_SLICK_COMPILER_QUERY_BENCHMARK}
logback.slick.compiler.RemoveFieldNames                     = ${?EXCHANGE_LOG_SLICK_COMPILER_REMOVEFIELDNAMES}
logback.slick.compiler.RemoveMappedTypes                    = ${?EXCHANGE_LOG_SLICK_COMPILER_REMOVEMAPPEDTYPES}
logback.slick.compiler.RemoveTakeDrop                       = ${?EXCHANGE_LOG_SLICK_COMPILER_REMOVETAKEDROP}
logback.slick.compiler.ReorderOperations                    = ${?EXCHANGE_LOG_SLICK_COMPILER_REORDEROPERATIONS}
logback.slick.compiler.ResolveZipJoins                      = ${?EXCHANGE_LOG_SLICK_COMPILER_RESOLVEZIPJOINS}
logback.slick.compiler.RewriteBooleans                      = ${?EXCHANGE_LOG_SLICK_COMPILER_REWRITEBOOLEANS}
logback.slick.compiler.RewriteDistinct                      = ${?EXCHANGE_LOG_SLICK_COMPILER_REWRITEDISTINCT}
logback.slick.compiler.RewriteJoins                         = ${?EXCHANGE_LOG_SLICK_COMPILER_REWRITEJOINS}
logback.slick.compiler.SpecializeParameters                 = ${?EXCHANGE_LOG_SLICK_COMPILER_SPECIALPARAMETERS}
logback.slick.compiler.VerifyTypes                          = ${?EXCHANGE_LOG_SLICK_COMPILER_VERIFYTYPES}
logback.slick.jdbc.DriverDataSource                         = ${?EXCHANGE_LOG_SLICK_JDBC_DRIVERDATASOURCE}
logback.slick.jdbc.JdbcBackend.benchmark                    = ${?EXCHANGE_LOG_SLICK_JDBC_BENCHMARK}
logback.slick.jdbc.JdbcBackend.parameter                    = ${?EXCHANGE_LOG_SLICK_JDBC_PARAMETER}
logback.slick.jdbc.JdbcBackend.statement                    = ${?EXCHANGE_LOG_SLICK_JDBC_STATEMENT}
logback.slick.jdbc.JdbcBackend.statementAndParameter        = ${?EXCHANGE_LOG_SLICK_JDBC_STATEMENTANDPARAMETER}
logback.slick.jdbc.JdbcModelBuilder                         = ${?EXCHANGE_LOG_SLICK_JDBC_JDBCMODELBUILDER}
logback.slick.jdbc.StatementInvoker.result                  = ${?EXCHANGE_LOG_SLICK_JDBC_STATEMENTINVOLKER_RESULT}
logback.slick.memory.HeapBackend                            = ${?EXCHANGE_LOG_SLICK_MEMORY_HEAPBACKEND}
logback.slick.memory.QueryInterpreter                       = ${?EXCHANGE_LOG_SLICK_MEMORY_QUERYINTERPRETER}
logback.slick.relational.ResultConverterCompiler            = ${?EXCHANGE_LOG_SLICK_RELATIONAL}
logback.slick.util.AsyncExecutor                            = ${?EXCHANGE_LOG_SLICK_ASYNCEXECUTOR}
logback.swagger.v3.core.converter.ModelConverterContextImpl = ${?EXCHANGE_LOG_SWAGGER_MODELCONVERTERCONTEXTIMPL}
logback.swagger.v3.jaxrs2.Reader                            = ${?EXCHANGE_LOG_SWAGGER_JAXRS2_READER}
